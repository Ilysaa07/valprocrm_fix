generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Core Models - Essential for the application
model User {
  id                String           @id @default(cuid())
  email             String           @unique
  password          String
  fullName          String
  address           String?
  gender            Gender?
  nikKtp            String?          @unique
  phoneNumber       String?
  bankAccountNumber String?
  ewalletNumber     String?
  profilePicture    String?
  role              Role             @default(EMPLOYEE)
  status            UserStatus       @default(PENDING)
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt

  // Core relationships
  notifications     Notification[]
  taskSubmissions   TaskSubmission[]
  taskFeedbacks     TaskFeedback[]
  assignedTasks     Task[]           @relation("TaskAssignee")
  createdTasks      Task[]           @relation("TaskCreator")
  
  // Attendance & Leave
  attendance        Attendance[]
  leaveRequests     LeaveRequest[]   @relation("LeaveRequestUser")
  decidedLeaveRequests LeaveRequest[] @relation("LeaveRequestDecider")
  wfhLogs           WfhLog[]

  // Chat (if needed)
  conversationParticipants ConversationParticipant[]
  sentMessages             Message[]
  messageReads             MessageRead[]
  messageDeletes           MessageDelete[]
  conversationDeletes      ConversationDelete[]

  @@map("users")
}

model Task {
  id                String             @id @default(cuid())
  title             String
  description       String
  dueDate           DateTime?
  status            TaskStatus         @default(NOT_STARTED)
  priority          TaskPriority       @default(MEDIUM)
  assignment        TaskAssignmentType
  createdById       String
  assigneeId        String?
  projectId         String?
  contactId         String?
  milestoneId       String?
  validationMessage String?
  tags              String             @default("[]")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt

  // Relationships
  notifications     Notification[]
  feedbacks         TaskFeedback[]
  submissions       TaskSubmission[]
  assignee          User?              @relation("TaskAssignee", fields: [assigneeId], references: [id])
  createdBy         User               @relation("TaskCreator", fields: [createdById], references: [id], onDelete: Cascade)
  project           Project?           @relation(fields: [projectId], references: [id], onDelete: SetNull)
  contact           Contact?           @relation(fields: [contactId], references: [id], onDelete: SetNull)
  milestone         ProjectMilestone?  @relation(fields: [milestoneId], references: [id], onDelete: SetNull)

  @@index([assigneeId])
  @@index([createdById])
  @@index([projectId])
  @@index([contactId])
  @@index([milestoneId])
  @@map("tasks")
}

model TaskSubmission {
  id           String   @id @default(cuid())
  taskId       String
  userId       String
  description  String?
  submittedAt  DateTime @default(now())
  updatedAt    DateTime @updatedAt
  task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  files        TaskSubmissionFile[]

  @@unique([taskId, userId])
  @@index([userId])
  @@map("task_submissions")
}

model TaskSubmissionFile {
  id            String   @id @default(cuid())
  submissionId  String
  fileUrl       String
  fileName      String
  fileSize      Int?
  fileType      String?
  createdAt     DateTime @default(now())
  submission    TaskSubmission @relation(fields: [submissionId], references: [id], onDelete: Cascade)

  @@index([submissionId])
  @@map("task_submission_files")
}

model TaskFeedback {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  message   String   @db.Text
  createdAt DateTime @default(now())
  task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("task_feedback")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  taskId    String?
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  task      Task?    @relation(fields: [taskId], references: [id])
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([taskId])
  @@index([userId])
  @@map("notifications")
}

model Attendance {
  id               String           @id @default(cuid())
  userId           String
  status           AttendanceStatus
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  checkInLatitude  Float?
  checkInLongitude Float?
  checkInTime      DateTime?
  checkOutTime     DateTime?
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([checkInTime])
  @@map("attendance")
}

model LeaveRequest {
  id          String      @id @default(cuid())
  userId      String
  type        LeaveType
  startDate   DateTime
  endDate     DateTime
  reason      String
  status      LeaveStatus @default(PENDING)
  decidedById String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  adminNotes  String?
  decidedBy   User?       @relation("LeaveRequestDecider", fields: [decidedById], references: [id])
  user        User        @relation("LeaveRequestUser", fields: [userId], references: [id], onDelete: Cascade)
  wfhLogs     WfhLog[]

  @@index([userId])
  @@index([status])
  @@index([decidedById])
  @@map("leave_requests")
}

model WfhLog {
  id                  String           @id @default(cuid())
  userId              String
  screenshotUrl       String
  status              ValidationStatus @default(PENDING)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  activityDescription String           @db.Text
  adminNotes          String?          @db.Text
  latitude            Float
  leaveRequestId      String?
  logTime             DateTime
  longitude           Float
  leaveRequest        LeaveRequest?    @relation(fields: [leaveRequestId], references: [id])
  user                User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([logTime])
  @@index([leaveRequestId])
  @@map("wfh_logs")
}

// Optional: Chat System (if needed)
model Conversation {
  id              String                    @id @default(cuid())
  name            String?
  type            ConversationType          @default(DIRECT)
  isArchived      Boolean                   @default(false)
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  deletedForUsers ConversationDelete[]
  participants    ConversationParticipant[]
  messages        Message[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  conversation   Conversation    @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id              String              @id @default(cuid())
  conversationId  String
  senderId        String
  content         String              @db.Text
  messageType     MessageType         @default(TEXT)
  isEdited        Boolean             @default(false)
  isDeleted       Boolean             @default(false)
  deletedAt       DateTime?
  deletedBy       String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  attachments     MessageAttachment[]
  deletedForUsers MessageDelete[]
  readReceipts    MessageRead[]
  conversation    Conversation        @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender          User                @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId])
  @@index([senderId])
  @@index([createdAt])
  @@map("messages")
}

model MessageAttachment {
  id        String   @id @default(cuid())
  messageId String
  fileName  String
  fileUrl   String
  fileSize  Int
  fileType  String
  createdAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
  @@map("message_attachments")
}

model MessageRead {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  readAt    DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_reads")
}

model MessageDelete {
  id        String   @id @default(cuid())
  messageId String
  userId    String
  deletedAt DateTime @default(now())
  message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
  @@map("message_deletes")
}

model ConversationDelete {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  deletedAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_deletes")
}

// Optional: Project Management (if needed)
model Contact {
  id              String            @id @default(cuid())
  fullName        String
  phoneNumber     String?
  whatsappNumber  String?
  instagram       String?
  address         String?           @db.Text
  companyName     String?
  position        String?
  notes           String?           @db.Text
  clientStatus    ClientStatus      @default(PROSPECT)
  serviceType     String?
  followUpDate    DateTime?
  createdById     String
  updatedById     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  activityLogs    ContactActivity[]
  projects        Project[]
  tasks           Task[]
  createdBy       User              @relation("ContactCreator", fields: [createdById], references: [id])
  updatedBy       User?             @relation("ContactUpdater", fields: [updatedById], references: [id])

  @@index([createdById])
  @@index([updatedById])
  @@index([clientStatus])
  @@index([companyName])
  @@map("contacts")
}

model ContactActivity {
  id          String   @id @default(cuid())
  contactId   String
  userId      String
  action      String
  oldData     String?  @db.Text
  newData     String?  @db.Text
  description String?
  createdAt   DateTime @default(now())
  contact     Contact  @relation(fields: [contactId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id])

  @@index([contactId])
  @@index([userId])
  @@map("contact_activities")
}

model Project {
  id              String            @id @default(cuid())
  name            String
  description     String?           @db.Text
  contactId       String
  serviceType     String
  startDate       DateTime
  endDate         DateTime
  status          ProjectStatus     @default(PLANNING)
  notes           String?           @db.Text
  createdById     String
  updatedById     String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  contact         Contact           @relation(fields: [contactId], references: [id], onDelete: Cascade)
  createdBy       User              @relation("ProjectCreator", fields: [createdById], references: [id])
  updatedBy       User?             @relation("ProjectUpdater", fields: [updatedById], references: [id])
  members         ProjectMember[]
  milestones      ProjectMilestone[]
  tasks           Task[]

  @@index([contactId])
  @@index([createdById])
  @@index([status])
  @@index([startDate])
  @@index([endDate])
  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      String?
  joinedAt  DateTime @default(now())
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@unique([projectId, userId])
  @@index([projectId])
  @@index([userId])
  @@map("project_members")
}

model ProjectMilestone {
  id          String          @id @default(cuid())
  projectId   String
  name        String
  description String?         @db.Text
  startDate   DateTime
  endDate     DateTime
  status      MilestoneStatus @default(NOT_STARTED)
  order       Int             @default(0)
  createdById String
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  project     Project         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdBy   User            @relation(fields: [createdById], references: [id])
  tasks       Task[]

  @@index([projectId])
  @@index([createdById])
  @@index([startDate])
  @@index([endDate])
  @@map("project_milestones")
}

// Enums
enum Role {
  ADMIN
  EMPLOYEE
  CLIENT
}

enum Gender {
  MALE
  FEMALE
}

enum UserStatus {
  PENDING
  APPROVED
  REJECTED
}

enum TaskStatus {
  NOT_STARTED
  IN_PROGRESS
  PENDING_VALIDATION
  COMPLETED
  REVISION
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskAssignmentType {
  SPECIFIC
  ALL_EMPLOYEES
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  SICK
  LEAVE
  WFH
}

enum LeaveType {
  SICK
  LEAVE
  WFH
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ValidationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum ConversationType {
  DIRECT
  GROUP
}

enum ParticipantRole {
  ADMIN
  MODERATOR
  MEMBER
}

enum MessageType {
  TEXT
  FILE
  IMAGE
  AUDIO
  VIDEO
  DELETED
}

enum ClientStatus {
  PROSPECT
  ACTIVE
  INACTIVE
  COMPLETED
}

enum MilestoneStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  OVERDUE
}

enum ProjectStatus {
  PLANNING
  ONGOING
  ON_HOLD
  COMPLETED
  CANCELLED
}



